<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom(true);
			zoom(target);
			if (!document.querySelector('.parent')) {
				// we have basically done a clearzoom so clear the url
				var params = get_params();
				if (params.x) delete params.x;
				if (params.y) delete params.y;
				history.replaceState(null, null, parse_params(params));
				unzoombtn.classList.add("hide");
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		var sl = t.getSubStringLength(0, txt.length);
		// check if only whitespace or if we can fit the entire string into width w
		if (/^ *$/.test(txt) || sl < w)
			return;

		// this isn't perfect, but gives a good starting point
		// and avoids calling getSubStringLength too often
		var start = Math.floor((w/sl) * txt.length);
		for (var x = start; x > 0; x = x-2) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom(dont_update_text) {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			if(!dont_update_text) update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="390.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="373" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="373" > </text>
<g id="frames">
<g >
<title>rocksdb::EncodeVarint32 (2,250,827,543 samples, 0.01%)</title><rect x="591.7" y="213" width="0.2" height="15.0" fill="rgb(237,149,35)" rx="2" ry="2" />
<text  x="594.73" y="223.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::CompareAndSwap (81,322,558,003 samples, 0.43%)</title><rect x="502.0" y="181" width="5.1" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="504.99" y="191.5" ></text>
</g>
<g >
<title>secondary_startup_64_no_verify (9,303,187,239 samples, 0.05%)</title><rect x="1189.4" y="309" width="0.6" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="1192.39" y="319.5" ></text>
</g>
<g >
<title>rocksdb::DBImpl::DefaultColumnFamily (47,143,035,326 samples, 0.25%)</title><rect x="1144.4" y="261" width="2.9" height="15.0" fill="rgb(207,11,2)" rx="2" ry="2" />
<text  x="1147.38" y="271.5" ></text>
</g>
<g >
<title>rocksdb::MemTableListVersion::Get (77,205,502,059 samples, 0.41%)</title><rect x="880.0" y="229" width="4.8" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="883.00" y="239.5" ></text>
</g>
<g >
<title>rocksdb::LookupKey::LookupKey (21,032,054,260 samples, 0.11%)</title><rect x="595.4" y="213" width="1.3" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="598.37" y="223.5" ></text>
</g>
<g >
<title>ksys_read (1,895,058,593 samples, 0.01%)</title><rect x="1188.2" y="229" width="0.1" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1191.19" y="239.5" ></text>
</g>
<g >
<title>rocksdb::DBImpl::FailIfCfHasTs (445,814,039,137 samples, 2.36%)</title><rect x="468.6" y="213" width="27.8" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="471.57" y="223.5" >r..</text>
</g>
<g >
<title>ttwu_do_activate (2,506,911,630 samples, 0.01%)</title><rect x="1189.4" y="69" width="0.2" height="15.0" fill="rgb(215,48,11)" rx="2" ry="2" />
<text  x="1192.42" y="79.5" ></text>
</g>
<g >
<title>rocksdb::ColumnFamilyHandleImpl::cfd (70,043,782,143 samples, 0.37%)</title><rect x="183.1" y="229" width="4.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="186.05" y="239.5" ></text>
</g>
<g >
<title>rocksdb::DBImpl::FailIfCfHasTs (123,057,457,392 samples, 0.65%)</title><rect x="187.4" y="229" width="7.7" height="15.0" fill="rgb(249,202,48)" rx="2" ry="2" />
<text  x="190.43" y="239.5" ></text>
</g>
<g >
<title>rocksdb::Benchmark::ReadRandom (17,986,995,792,330 samples, 95.23%)</title><rect x="20.7" y="261" width="1123.7" height="15.0" fill="rgb(210,26,6)" rx="2" ry="2" />
<text  x="23.72" y="271.5" >rocksdb::Benchmark::ReadRandom</text>
</g>
<g >
<title>rocksdb::HistogramBucketMapper::IndexForValue (94,320,039,791 samples, 0.50%)</title><rect x="1067.6" y="229" width="5.9" height="15.0" fill="rgb(249,204,48)" rx="2" ry="2" />
<text  x="1070.65" y="239.5" ></text>
</g>
<g >
<title>iostat (6,314,193,662 samples, 0.03%)</title><rect x="1188.0" y="325" width="0.4" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1191.03" y="335.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap (29,857,162,732 samples, 0.16%)</title><rect x="589.9" y="197" width="1.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="592.87" y="207.5" ></text>
</g>
<g >
<title>__sysvec_apic_timer_interrupt (3,107,001,270 samples, 0.02%)</title><rect x="1189.4" y="165" width="0.2" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="1192.41" y="175.5" ></text>
</g>
<g >
<title>__hrtimer_run_queues (2,906,647,817 samples, 0.02%)</title><rect x="1189.4" y="133" width="0.2" height="15.0" fill="rgb(237,150,35)" rx="2" ry="2" />
<text  x="1192.41" y="143.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3,926,658,752 samples, 0.02%)</title><rect x="1189.1" y="293" width="0.3" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1192.11" y="303.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap (1,058,092,841,908 samples, 5.60%)</title><rect x="394.6" y="197" width="66.1" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="397.59" y="207.5" >rocksdb..</text>
</g>
<g >
<title>swapper (9,505,436,333 samples, 0.05%)</title><rect x="1189.4" y="325" width="0.6" height="15.0" fill="rgb(239,158,37)" rx="2" ry="2" />
<text  x="1192.38" y="335.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;rocksdb::OperationType, std::pair&lt;rocksdb::OperationType const, std::shared_ptr&lt;rocksdb::HistogramImpl&gt; &gt;, std::allocator&lt;std::pair&lt;rocksdb::OperationType const, std::shared_ptr&lt;rocksdb::HistogramImpl&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;rocksdb::OperationType&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (58,440,138,938 samples, 0.31%)</title><rect x="1078.7" y="229" width="3.6" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1081.70" y="239.5" ></text>
</g>
<g >
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion (40,334,714,202 samples, 0.21%)</title><rect x="463.5" y="213" width="2.5" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="466.52" y="223.5" ></text>
</g>
<g >
<title>rocksdb::ColumnFamilyData::ReturnThreadLocalSuperVersion (1,410,440,804,736 samples, 7.47%)</title><rect x="499.2" y="197" width="88.1" height="15.0" fill="rgb(228,108,25)" rx="2" ry="2" />
<text  x="502.17" y="207.5" >rocksdb::C..</text>
</g>
<g >
<title>__x64_sys_read (3,926,658,752 samples, 0.02%)</title><rect x="1189.1" y="261" width="0.3" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1192.11" y="271.5" ></text>
</g>
<g >
<title>vfs_read (1,789,756,517 samples, 0.01%)</title><rect x="1188.2" y="213" width="0.1" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1191.20" y="223.5" ></text>
</g>
<g >
<title>start_secondary (9,303,187,239 samples, 0.05%)</title><rect x="1189.4" y="293" width="0.6" height="15.0" fill="rgb(242,170,40)" rx="2" ry="2" />
<text  x="1192.39" y="303.5" ></text>
</g>
<g >
<title>rocksdb::MemTableListVersion::GetFromList (282,516,717,688 samples, 1.50%)</title><rect x="620.3" y="197" width="17.7" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="623.33" y="207.5" ></text>
</g>
<g >
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion (48,334,369,011 samples, 0.26%)</title><rect x="873.9" y="229" width="3.0" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="876.90" y="239.5" ></text>
</g>
<g >
<title>std::_Function_base::~_Function_base (102,972,441,400 samples, 0.55%)</title><rect x="865.9" y="213" width="6.5" height="15.0" fill="rgb(221,74,17)" rx="2" ry="2" />
<text  x="868.94" y="223.5" ></text>
</g>
<g >
<title>rocksdb::Stats::FinishedOps (2,208,302,986,082 samples, 11.69%)</title><rect x="944.4" y="245" width="137.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="947.39" y="255.5" >rocksdb::Stats::F..</text>
</g>
<g >
<title>do_syscall_64 (3,926,658,752 samples, 0.02%)</title><rect x="1189.1" y="277" width="0.3" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1192.11" y="287.5" ></text>
</g>
<g >
<title>rocksdb::StopWatch::~StopWatch (17,144,110,337 samples, 0.09%)</title><rect x="661.2" y="213" width="1.1" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="664.24" y="223.5" ></text>
</g>
<g >
<title>__x64_sys_read (1,895,058,593 samples, 0.01%)</title><rect x="1188.2" y="245" width="0.1" height="15.0" fill="rgb(219,68,16)" rx="2" ry="2" />
<text  x="1191.19" y="255.5" ></text>
</g>
<g >
<title>awk (1,722,711,573 samples, 0.01%)</title><rect x="12.4" y="325" width="0.1" height="15.0" fill="rgb(226,101,24)" rx="2" ry="2" />
<text  x="15.37" y="335.5" ></text>
</g>
<g >
<title>enqueue_task_fair (1,660,580,240 samples, 0.01%)</title><rect x="1189.4" y="37" width="0.1" height="15.0" fill="rgb(216,52,12)" rx="2" ry="2" />
<text  x="1192.43" y="47.5" ></text>
</g>
<g >
<title>start_thread (18,812,885,964,387 samples, 99.60%)</title><rect x="12.7" y="309" width="1175.3" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="15.73" y="319.5" >start_thread</text>
</g>
<g >
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion (1,273,783,027,439 samples, 6.74%)</title><rect x="383.9" y="213" width="79.6" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="386.95" y="223.5" >rocksdb::..</text>
</g>
<g >
<title>try_to_wake_up (2,638,619,918 samples, 0.01%)</title><rect x="1189.4" y="85" width="0.2" height="15.0" fill="rgb(220,70,16)" rx="2" ry="2" />
<text  x="1192.42" y="95.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::StaticMeta::Swap (9,574,292,794 samples, 0.05%)</title><rect x="662.3" y="213" width="0.6" height="15.0" fill="rgb(248,202,48)" rx="2" ry="2" />
<text  x="665.31" y="223.5" ></text>
</g>
<g >
<title>rocksdb::HistogramImpl::Add (36,880,882,183 samples, 0.20%)</title><rect x="931.5" y="245" width="2.3" height="15.0" fill="rgb(214,44,10)" rx="2" ry="2" />
<text  x="934.47" y="255.5" ></text>
</g>
<g >
<title>[unknown] (1,794,265,862 samples, 0.01%)</title><rect x="1188.5" y="309" width="0.1" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1191.47" y="319.5" ></text>
</g>
<g >
<title>rocksdb::GetContext::GetContext (1,526,295,193,628 samples, 8.08%)</title><rect x="770.5" y="197" width="95.3" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="773.48" y="207.5" >rocksdb::Ge..</text>
</g>
<g >
<title>rocksdb::MemTableListVersion::GetFromList (67,004,058,727 samples, 0.35%)</title><rect x="638.0" y="213" width="4.2" height="15.0" fill="rgb(215,49,11)" rx="2" ry="2" />
<text  x="640.98" y="223.5" ></text>
</g>
<g >
<title>__memset_avx2_unaligned_erms (66,057,342,390 samples, 0.35%)</title><rect x="16.6" y="261" width="4.1" height="15.0" fill="rgb(223,84,20)" rx="2" ry="2" />
<text  x="19.59" y="271.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul&gt;::_M_gen_rand (191,051,155,324 samples, 1.01%)</title><rect x="1122.9" y="245" width="12.0" height="15.0" fill="rgb(233,132,31)" rx="2" ry="2" />
<text  x="1125.93" y="255.5" ></text>
</g>
<g >
<title>rocksdb::DBImpl::Get (12,932,585,083,579 samples, 68.47%)</title><rect x="118.0" y="245" width="807.9" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="120.97" y="255.5" >rocksdb::DBImpl::Get</text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::Instance (42,357,768,713 samples, 0.22%)</title><rect x="507.1" y="181" width="2.6" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="510.07" y="191.5" ></text>
</g>
<g >
<title>cpuidle_idle_call (6,350,781,268 samples, 0.03%)</title><rect x="1189.4" y="245" width="0.4" height="15.0" fill="rgb(207,9,2)" rx="2" ry="2" />
<text  x="1192.40" y="255.5" ></text>
</g>
<g >
<title>rocksdb::HistogramStat::Add (2,315,879,597 samples, 0.01%)</title><rect x="933.8" y="245" width="0.1" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="936.77" y="255.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal (45,052,211,513 samples, 0.24%)</title><rect x="584.5" y="181" width="2.8" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="587.46" y="191.5" ></text>
</g>
<g >
<title>proc_single_show (3,713,051,263 samples, 0.02%)</title><rect x="1189.1" y="181" width="0.3" height="15.0" fill="rgb(221,77,18)" rx="2" ry="2" />
<text  x="1192.13" y="191.5" ></text>
</g>
<g >
<title>rocksdb::Cleanable::Cleanable (6,897,239,514 samples, 0.04%)</title><rect x="770.0" y="197" width="0.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="773.05" y="207.5" ></text>
</g>
<g >
<title>rocksdb::PerfStepTimer::Stop (117,409,765,853 samples, 0.62%)</title><rect x="884.9" y="229" width="7.3" height="15.0" fill="rgb(242,173,41)" rx="2" ry="2" />
<text  x="887.87" y="239.5" ></text>
</g>
<g >
<title>rocksdb::(anonymous namespace)::FilePicker::GetNextFile (4,929,214,857 samples, 0.03%)</title><rect x="379.1" y="213" width="0.4" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="382.15" y="223.5" ></text>
</g>
<g >
<title>std::_Hashtable&lt;rocksdb::OperationType, std::pair&lt;rocksdb::OperationType const, std::shared_ptr&lt;rocksdb::HistogramImpl&gt; &gt;, std::allocator&lt;std::pair&lt;rocksdb::OperationType const, std::shared_ptr&lt;rocksdb::HistogramImpl&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;rocksdb::OperationType&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (609,967,810,997 samples, 3.23%)</title><rect x="1082.3" y="245" width="38.2" height="15.0" fill="rgb(253,224,53)" rx="2" ry="2" />
<text  x="1085.35" y="255.5" >std..</text>
</g>
<g >
<title>all (18,888,911,529,667 samples, 100%)</title><rect x="10.0" y="341" width="1180.0" height="15.0" fill="rgb(213,39,9)" rx="2" ry="2" />
<text  x="13.00" y="351.5" ></text>
</g>
<g >
<title>rocksdb::Cleanable::~Cleanable (71,906,063,028 samples, 0.38%)</title><rect x="379.5" y="213" width="4.4" height="15.0" fill="rgb(234,137,32)" rx="2" ry="2" />
<text  x="382.46" y="223.5" ></text>
</g>
<g >
<title>rocksdb::Stats::FinishedOps (79,310,905,596 samples, 0.42%)</title><rect x="1150.5" y="261" width="4.9" height="15.0" fill="rgb(245,184,44)" rx="2" ry="2" />
<text  x="1153.49" y="271.5" ></text>
</g>
<g >
<title>read (1,895,058,593 samples, 0.01%)</title><rect x="1188.2" y="293" width="0.1" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1191.19" y="303.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::StaticMeta::CompareAndSwap (1,196,459,289,596 samples, 6.33%)</title><rect x="509.7" y="181" width="74.8" height="15.0" fill="rgb(229,112,26)" rx="2" ry="2" />
<text  x="512.72" y="191.5" >rocksdb:..</text>
</g>
<g >
<title>[db_bench] (49,794,394,048 samples, 0.26%)</title><rect x="370.2" y="213" width="3.1" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="373.22" y="223.5" ></text>
</g>
<g >
<title>proc_pid_status (2,691,355,124 samples, 0.01%)</title><rect x="1189.1" y="165" width="0.2" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="1192.13" y="175.5" ></text>
</g>
<g >
<title>cpuidle_enter (5,411,113,223 samples, 0.03%)</title><rect x="1189.4" y="229" width="0.3" height="15.0" fill="rgb(205,1,0)" rx="2" ry="2" />
<text  x="1192.40" y="239.5" ></text>
</g>
<g >
<title>do_syscall_64 (1,895,058,593 samples, 0.01%)</title><rect x="1188.2" y="261" width="0.1" height="15.0" fill="rgb(209,20,4)" rx="2" ry="2" />
<text  x="1191.19" y="271.5" ></text>
</g>
<g >
<title>seq_read_iter (3,926,658,752 samples, 0.02%)</title><rect x="1189.1" y="197" width="0.3" height="15.0" fill="rgb(232,128,30)" rx="2" ry="2" />
<text  x="1192.11" y="207.5" ></text>
</g>
<g >
<title>ps (11,580,961,621 samples, 0.06%)</title><rect x="1188.6" y="325" width="0.8" height="15.0" fill="rgb(247,193,46)" rx="2" ry="2" />
<text  x="1191.64" y="335.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul&gt;::operator (520,814,484,181 samples, 2.76%)</title><rect x="1155.4" y="261" width="32.6" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1158.45" y="271.5" >st..</text>
</g>
<g >
<title>asm_sysvec_apic_timer_interrupt (4,555,501,553 samples, 0.02%)</title><rect x="1189.4" y="197" width="0.3" height="15.0" fill="rgb(232,127,30)" rx="2" ry="2" />
<text  x="1192.41" y="207.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::Instance (70,203,581,326 samples, 0.37%)</title><rect x="386.0" y="197" width="4.4" height="15.0" fill="rgb(254,229,54)" rx="2" ry="2" />
<text  x="389.04" y="207.5" ></text>
</g>
<g >
<title>rocksdb::DBImpl::ReturnAndCleanupSuperVersion (1,525,692,304,197 samples, 8.08%)</title><rect x="496.4" y="213" width="95.3" height="15.0" fill="rgb(238,153,36)" rx="2" ry="2" />
<text  x="499.42" y="223.5" >rocksdb::DB..</text>
</g>
<g >
<title>rocksdb::Version::Get (3,220,059,118,830 samples, 17.05%)</title><rect x="664.8" y="213" width="201.1" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="667.78" y="223.5" >rocksdb::Version::Get</text>
</g>
<g >
<title>rocksdb::Random::GetTLSInstance (5,302,600,285 samples, 0.03%)</title><rect x="865.5" y="181" width="0.3" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="868.50" y="191.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::StaticMeta::GetThreadLocal (66,596,778,420 samples, 0.35%)</title><rect x="390.4" y="197" width="4.2" height="15.0" fill="rgb(245,187,44)" rx="2" ry="2" />
<text  x="393.42" y="207.5" ></text>
</g>
<g >
<title>rocksdb::MemTableListVersion::Get (411,328,591,420 samples, 2.18%)</title><rect x="612.3" y="213" width="25.7" height="15.0" fill="rgb(237,147,35)" rx="2" ry="2" />
<text  x="615.28" y="223.5" >r..</text>
</g>
<g >
<title>rocksdb::ReadOptions::ReadOptions (167,751,699,530 samples, 0.89%)</title><rect x="933.9" y="245" width="10.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="936.92" y="255.5" ></text>
</g>
<g >
<title>rocksdb::MemTable::Get (249,639,283,505 samples, 1.32%)</title><rect x="596.7" y="213" width="15.6" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="599.69" y="223.5" ></text>
</g>
<g >
<title>rocksdb::Version::Get (104,762,795,492 samples, 0.55%)</title><rect x="919.3" y="229" width="6.6" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="922.33" y="239.5" ></text>
</g>
<g >
<title>std::mersenne_twister_engine&lt;unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul&gt;::operator (152,283,554,795 samples, 0.81%)</title><rect x="1134.9" y="245" width="9.5" height="15.0" fill="rgb(211,30,7)" rx="2" ry="2" />
<text  x="1137.86" y="255.5" ></text>
</g>
<g >
<title>wake_up_process (2,650,122,835 samples, 0.01%)</title><rect x="1189.4" y="101" width="0.2" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1192.42" y="111.5" ></text>
</g>
<g >
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator (40,454,336,094 samples, 0.21%)</title><rect x="466.0" y="213" width="2.6" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="469.04" y="223.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::Swap (45,434,042,675 samples, 0.24%)</title><rect x="460.7" y="197" width="2.8" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="463.68" y="207.5" ></text>
</g>
<g >
<title>rocksdb::MemTable::Get (48,373,476,893 samples, 0.26%)</title><rect x="877.0" y="229" width="3.0" height="15.0" fill="rgb(241,169,40)" rx="2" ry="2" />
<text  x="879.98" y="239.5" ></text>
</g>
<g >
<title>rocksdb::HistogramStat::Add (82,543,018,848 samples, 0.44%)</title><rect x="1073.5" y="229" width="5.2" height="15.0" fill="rgb(250,207,49)" rx="2" ry="2" />
<text  x="1076.54" y="239.5" ></text>
</g>
<g >
<title>ls (2,676,305,840 samples, 0.01%)</title><rect x="1188.5" y="325" width="0.1" height="15.0" fill="rgb(222,82,19)" rx="2" ry="2" />
<text  x="1191.47" y="335.5" ></text>
</g>
<g >
<title>read (3,926,658,752 samples, 0.02%)</title><rect x="1189.1" y="309" width="0.3" height="15.0" fill="rgb(252,216,51)" rx="2" ry="2" />
<text  x="1192.11" y="319.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::Swap (29,950,571,768 samples, 0.16%)</title><rect x="662.9" y="213" width="1.9" height="15.0" fill="rgb(253,222,53)" rx="2" ry="2" />
<text  x="665.91" y="223.5" ></text>
</g>
<g >
<title>[db_bench] (61,813,440,406 samples, 0.33%)</title><rect x="12.7" y="261" width="3.9" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="15.73" y="271.5" ></text>
</g>
<g >
<title>rocksdb::ReadOptions::ReadOptions (423,728,908,488 samples, 2.24%)</title><rect x="892.2" y="229" width="26.5" height="15.0" fill="rgb(235,138,33)" rx="2" ry="2" />
<text  x="895.21" y="239.5" >r..</text>
</g>
<g >
<title>rocksdb::GetContext::GetContext (56,035,969,644 samples, 0.30%)</title><rect x="591.9" y="213" width="3.5" height="15.0" fill="rgb(214,42,10)" rx="2" ry="2" />
<text  x="594.87" y="223.5" ></text>
</g>
<g >
<title>rocksdb::StopWatch::~StopWatch (10,369,225,325 samples, 0.05%)</title><rect x="918.7" y="229" width="0.6" height="15.0" fill="rgb(243,179,42)" rx="2" ry="2" />
<text  x="921.68" y="239.5" ></text>
</g>
<g >
<title>sysvec_apic_timer_interrupt (4,549,956,915 samples, 0.02%)</title><rect x="1189.4" y="181" width="0.3" height="15.0" fill="rgb(220,69,16)" rx="2" ry="2" />
<text  x="1192.41" y="191.5" ></text>
</g>
<g >
<title>rocksdb::MergeContext::~MergeContext (4,495,547,849 samples, 0.02%)</title><rect x="642.2" y="213" width="0.2" height="15.0" fill="rgb(212,36,8)" rx="2" ry="2" />
<text  x="645.16" y="223.5" ></text>
</g>
<g >
<title>rocksdb::(anonymous namespace)::PosixClock::NowMicros (332,711,516,250 samples, 1.76%)</title><rect x="1046.9" y="229" width="20.7" height="15.0" fill="rgb(224,90,21)" rx="2" ry="2" />
<text  x="1049.86" y="239.5" ></text>
</g>
<g >
<title>rocksdb::ColumnFamilyHandleImpl::GetComparator (36,110,071,486 samples, 0.19%)</title><rect x="489.4" y="197" width="2.3" height="15.0" fill="rgb(224,89,21)" rx="2" ry="2" />
<text  x="492.41" y="207.5" ></text>
</g>
<g >
<title>vfs_read (3,926,658,752 samples, 0.02%)</title><rect x="1189.1" y="229" width="0.3" height="15.0" fill="rgb(224,88,21)" rx="2" ry="2" />
<text  x="1192.11" y="239.5" ></text>
</g>
<g >
<title>rocksdb::DBImpl::GetImpl (10,865,222,587,885 samples, 57.52%)</title><rect x="195.1" y="229" width="678.8" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="198.12" y="239.5" >rocksdb::DBImpl::GetImpl</text>
</g>
<g >
<title>[[vdso]] (332,711,516,250 samples, 1.76%)</title><rect x="1046.9" y="213" width="20.7" height="15.0" fill="rgb(218,60,14)" rx="2" ry="2" />
<text  x="1049.86" y="223.5" ></text>
</g>
<g >
<title>ksys_read (3,926,658,752 samples, 0.02%)</title><rect x="1189.1" y="245" width="0.3" height="15.0" fill="rgb(229,113,27)" rx="2" ry="2" />
<text  x="1192.11" y="255.5" ></text>
</g>
<g >
<title>do_idle (9,271,060,668 samples, 0.05%)</title><rect x="1189.4" y="261" width="0.6" height="15.0" fill="rgb(212,34,8)" rx="2" ry="2" />
<text  x="1192.39" y="271.5" ></text>
</g>
<g >
<title>rocksdb::(anonymous namespace)::FilePicker::GetNextFile (110,467,319,750 samples, 0.58%)</title><rect x="763.1" y="197" width="6.9" height="15.0" fill="rgb(217,55,13)" rx="2" ry="2" />
<text  x="766.15" y="207.5" ></text>
</g>
<g >
<title>std::__detail::_Map_base&lt;rocksdb::OperationType, std::pair&lt;rocksdb::OperationType const, std::shared_ptr&lt;rocksdb::HistogramImpl&gt; &gt;, std::allocator&lt;std::pair&lt;rocksdb::OperationType const, std::shared_ptr&lt;rocksdb::HistogramImpl&gt; &gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;rocksdb::OperationType&gt;, std::hash&lt;unsigned char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (39,637,580,838 samples, 0.21%)</title><rect x="1120.5" y="245" width="2.4" height="15.0" fill="rgb(244,180,43)" rx="2" ry="2" />
<text  x="1123.45" y="255.5" ></text>
</g>
<g >
<title>rocksdb::Status::operator= (300,739,882,872 samples, 1.59%)</title><rect x="642.4" y="213" width="18.8" height="15.0" fill="rgb(245,186,44)" rx="2" ry="2" />
<text  x="645.45" y="223.5" ></text>
</g>
<g >
<title>rocksdb::Random::GetTLSInstance (1,741,904,615 samples, 0.01%)</title><rect x="865.8" y="197" width="0.1" height="15.0" fill="rgb(240,164,39)" rx="2" ry="2" />
<text  x="868.83" y="207.5" ></text>
</g>
<g >
<title>rocksdb::DBImpl::Get (50,750,964,158 samples, 0.27%)</title><rect x="1147.3" y="261" width="3.2" height="15.0" fill="rgb(235,141,33)" rx="2" ry="2" />
<text  x="1150.32" y="271.5" ></text>
</g>
<g >
<title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (24,096,695,942 samples, 0.13%)</title><rect x="872.4" y="213" width="1.5" height="15.0" fill="rgb(251,215,51)" rx="2" ry="2" />
<text  x="875.37" y="223.5" ></text>
</g>
<g >
<title>rocksdb::ThreadLocalPtr::CompareAndSwap (41,430,887,752 samples, 0.22%)</title><rect x="587.3" y="197" width="2.6" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="590.28" y="207.5" ></text>
</g>
<g >
<title>rocksdb::Benchmark::ThreadBody (18,812,885,964,387 samples, 99.60%)</title><rect x="12.7" y="277" width="1175.3" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="15.73" y="287.5" >rocksdb::Benchmark::ThreadBody</text>
</g>
<g >
<title>enqueue_task (2,475,845,664 samples, 0.01%)</title><rect x="1189.4" y="53" width="0.2" height="15.0" fill="rgb(230,116,27)" rx="2" ry="2" />
<text  x="1192.42" y="63.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1,895,058,593 samples, 0.01%)</title><rect x="1188.2" y="277" width="0.1" height="15.0" fill="rgb(218,63,15)" rx="2" ry="2" />
<text  x="1191.19" y="287.5" ></text>
</g>
<g >
<title>cpuidle_enter_state (5,382,060,301 samples, 0.03%)</title><rect x="1189.4" y="213" width="0.3" height="15.0" fill="rgb(221,73,17)" rx="2" ry="2" />
<text  x="1192.40" y="223.5" ></text>
</g>
<g >
<title>hrtimer_wakeup (2,652,049,905 samples, 0.01%)</title><rect x="1189.4" y="117" width="0.2" height="15.0" fill="rgb(252,219,52)" rx="2" ry="2" />
<text  x="1192.42" y="127.5" ></text>
</g>
<g >
<title>TLS init function for rocksdb::perf_context (363,513,856,724 samples, 1.92%)</title><rect x="152.6" y="229" width="22.7" height="15.0" fill="rgb(233,133,31)" rx="2" ry="2" />
<text  x="155.57" y="239.5" >T..</text>
</g>
<g >
<title>bash (2,148,847,269 samples, 0.01%)</title><rect x="12.5" y="325" width="0.1" height="15.0" fill="rgb(239,157,37)" rx="2" ry="2" />
<text  x="15.48" y="335.5" ></text>
</g>
<g >
<title>cpu_startup_entry (9,302,940,337 samples, 0.05%)</title><rect x="1189.4" y="277" width="0.6" height="15.0" fill="rgb(252,220,52)" rx="2" ry="2" />
<text  x="1192.39" y="287.5" ></text>
</g>
<g >
<title>[unknown] (5,625,747,116 samples, 0.03%)</title><rect x="1188.7" y="309" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1191.65" y="319.5" ></text>
</g>
<g >
<title>rocksdb::(anonymous namespace)::StartThreadWrapper (18,812,885,964,387 samples, 99.60%)</title><rect x="12.7" y="293" width="1175.3" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="15.73" y="303.5" >rocksdb::(anonymous namespace)::StartThreadWrapper</text>
</g>
<g >
<title>rocksdb::ColumnFamilyHandleImpl::cfd (76,097,871,282 samples, 0.40%)</title><rect x="491.7" y="197" width="4.7" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="494.67" y="207.5" ></text>
</g>
<g >
<title>seq_read (3,926,658,752 samples, 0.02%)</title><rect x="1189.1" y="213" width="0.3" height="15.0" fill="rgb(213,37,8)" rx="2" ry="2" />
<text  x="1192.11" y="223.5" ></text>
</g>
<g >
<title>rocksdb::DBImpl::GetImpl (89,527,420,954 samples, 0.47%)</title><rect x="925.9" y="245" width="5.6" height="15.0" fill="rgb(238,155,37)" rx="2" ry="2" />
<text  x="928.87" y="255.5" ></text>
</g>
<g >
<title>__memmove_avx_unaligned_erms (93,217,765,901 samples, 0.49%)</title><rect x="373.3" y="213" width="5.8" height="15.0" fill="rgb(205,0,0)" rx="2" ry="2" />
<text  x="376.33" y="223.5" ></text>
</g>
<g >
<title>hrtimer_interrupt (3,058,563,156 samples, 0.02%)</title><rect x="1189.4" y="149" width="0.2" height="15.0" fill="rgb(228,109,26)" rx="2" ry="2" />
<text  x="1192.41" y="159.5" ></text>
</g>
<g >
<title>rocksdb::ColumnFamilyData::GetThreadLocalSuperVersion (36,034,394,691 samples, 0.19%)</title><rect x="180.8" y="229" width="2.3" height="15.0" fill="rgb(252,218,52)" rx="2" ry="2" />
<text  x="183.80" y="239.5" ></text>
</g>
<g >
<title>rocksdb::Cleanable::Cleanable (88,254,214,290 samples, 0.47%)</title><rect x="175.3" y="229" width="5.5" height="15.0" fill="rgb(248,201,48)" rx="2" ry="2" />
<text  x="178.28" y="239.5" ></text>
</g>
<g >
<title>[unknown] (4,526,349,422 samples, 0.02%)</title><rect x="1188.0" y="309" width="0.3" height="15.0" fill="rgb(210,24,5)" rx="2" ry="2" />
<text  x="1191.03" y="319.5" ></text>
</g>
<g >
<title>db_bench (18,814,462,798,540 samples, 99.61%)</title><rect x="12.6" y="325" width="1175.4" height="15.0" fill="rgb(213,38,9)" rx="2" ry="2" />
<text  x="15.63" y="335.5" >db_bench</text>
</g>
</g>
</svg>
